---
title: "Assignment 4"
author: "Sylwia Lipior"
format: html
embed-resources: true
editor: visual
---

## Make things run faster

```{r}


# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  t(apply(mat, 1, cumsum))
}

```

### Question 1

```{r}

library(microbenchmark)


# Generate data
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Checking outputs for correctness
all.equal(fun1(dat), fun1alt(dat))
all.equal(fun2(dat), fun2alt(dat))

# Performance testing
microbenchmark(
  fun1(dat),
  fun1alt(dat),
  unit = "relative"
)

microbenchmark(
  fun2(dat),
  fun2alt(dat),
  unit = "relative"
)

```

### Question 2

```{r}

# Make things run faster with parallel computing
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132

# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})

library(parallel)

sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n * 2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Determine the number of cores to use
no_cores <- detectCores() - 1  # Reserve one core for system stability

# Set up a parallel cluster
cl <- makeCluster(no_cores)

# Set the seed for reproducibility in a parallel environment
clusterSetRNGStream(cl, 1231)

# Run the simulation in parallel and measure time
system.time({
  # Export the necessary objects to the cluster
  clusterExport(cl, "sim_pi")
  
  # Parallel computation
  ans <- unlist(parLapply(cl, 1:4000, sim_pi, n = 10000))
  
  # Print the result
  print(mean(ans))
})

# Stop the cluster after use
stopCluster(cl)


```

### SQL

```{r}

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

### Question 3

```{r}

library(DBI)

# SQL query to count movies in each rating category
query <- "
  SELECT 
    rating, 
    COUNT(*) AS movie_count
  FROM 
    film 
  GROUP BY 
    rating;
"

# Execute the query and store the result in a data frame
movie_count_by_rating <- dbGetQuery(con, query)

# Print the result
print(movie_count_by_rating)

```

### Question 4

```{r}

library(DBI)

# SQL query to find average replacement cost and rental rate for each rating
query <- "
  SELECT 
    rating, 
    AVG(replacement_cost) AS avg_replacement_cost,
    AVG(rental_rate) AS avg_rental_rate
  FROM 
    film 
  GROUP BY 
    rating;
"

# Execute the query and store the result in a data frame
avg_costs_by_rating <- dbGetQuery(con, query)

# Print the result
print(avg_costs_by_rating)

```

### Question 5

```{r}

library(DBI)

# SQL query to count films for each category ID
query <- "
  SELECT 
    fc.category_id, 
    COUNT(f.film_id) AS film_count
  FROM 
    film_category fc
  INNER JOIN 
    film f ON fc.film_id = f.film_id
  GROUP BY 
    fc.category_id;
"

# Execute the query and store the result in a data frame
film_count_by_category <- dbGetQuery(con, query)

# Print the result
print(film_count_by_category)

```

### Question 6

```{r}

library(DBI)

# SQL query to find the film count for each category
query <- "
  SELECT 
    c.name AS category_name,
    COUNT(fc.film_id) AS film_count
  FROM 
    category c
  INNER JOIN 
    film_category fc ON c.category_id = fc.category_id
  INNER JOIN 
    film f ON fc.film_id = f.film_id
  GROUP BY 
    c.name
  ORDER BY 
    film_count DESC;
"

# Execute the query and store the result in a data frame
film_count_by_category <- dbGetQuery(con, query)

# Print the result
print(film_count_by_category)


```

The top film category is sports!
